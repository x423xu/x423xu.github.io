<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>tools on Xiaoyu&#39;s blog</title>
    <link>https://x423xu.github.io/tags/tools/</link>
    <description>Recent content in tools on Xiaoyu&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 13 Jan 2023 13:19:11 -0500</lastBuildDate><atom:link href="https://x423xu.github.io/tags/tools/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Multiple Processing in Python</title>
      <link>https://x423xu.github.io/posts/multi-process-python/</link>
      <pubDate>Fri, 13 Jan 2023 13:19:11 -0500</pubDate>
      
      <guid>https://x423xu.github.io/posts/multi-process-python/</guid>
      <description>Goals I am recently working on a computer vision task and need a large volume data to be downloaded and processed. However, it takes too much time working in a single thread. So, working in parrallel way in a HPC system would be a better choice.
Understand the multiprocessing, subprocess, threading package in python The workflow for a MPI work Transfer to HPC Multiprocessing package: Process-based parallelism Pool object: parallelizing execution and distributing data (data parallelism) Basic example:</description>
    </item>
    
    <item>
      <title>linux-operations</title>
      <link>https://x423xu.github.io/posts/2022-05-26-linux-operations/</link>
      <pubDate>Wed, 09 Nov 2022 17:08:52 -0500</pubDate>
      
      <guid>https://x423xu.github.io/posts/2022-05-26-linux-operations/</guid>
      <description>Mout a disk using gparted to format the disk to ext4 file system: sudo apt-get install gparted -&amp;gt; sudo gparted -&amp;gt; format the disk mount the disk to mountpoint, eg: sudo mount /dev/sda2 ~/HDD Permanently mounting: cat /etc/fstab to get UUID -&amp;gt; here change the ownership of the folder ~/HDD: sudo chown xxy ~/ vim cheatsheet vscode cheetsheat 1 2 3 4 5 skip to the front of the line: `home` skip to the end of the line: `end` select to the end: `shift+end` close editor:`ctrl+w` open recent: `ctrl+R` singularity cheatsheet 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 build sif file: sudo singularity build xiaoyu.</description>
    </item>
    
    <item>
      <title>Jupyterhub</title>
      <link>https://x423xu.github.io/posts/jupyterhub/</link>
      <pubDate>Mon, 07 Nov 2022 12:59:14 -0500</pubDate>
      
      <guid>https://x423xu.github.io/posts/jupyterhub/</guid>
      <description>Here I would introduce how to use jupyter hub in HPC
Introduction JupyterHub is the best way to serve Jupyter notebook for multiple users. Because jupyterhub manages a separate Jupyter encironment for each user, it can be used in a class of students, a corporate data scientific research group. It is a multi-user Hub that spawns, manages, and proxies multiple instances of the sinfle0user Jupyter notebook server.
It offers distributions for different use cases.</description>
    </item>
    
    <item>
      <title>Pytorch Lightning</title>
      <link>https://x423xu.github.io/posts/pytorch-lightning/</link>
      <pubDate>Mon, 31 Oct 2022 16:43:31 -0400</pubDate>
      
      <guid>https://x423xu.github.io/posts/pytorch-lightning/</guid>
      <description>what is pytorch lightning PyTorch Lightning is the deep learning framework with “batteries included” for professional AI researchers and machine learning engineers who need maximal flexibility while super-charging performance at scale.
quick start
Your browser does not support the video tag. summary steps:
lightning module forward func configure optimizers def training_step def validation_step remove .cuda() backward and step as hook init lightning module init trainer add other functions as call back explanation about dataloader and sampler LightningDataModule was designed as a way of decoupling data-related hooks from the LightningDataModule, so you can develop dataset agonostic models.</description>
    </item>
    
    <item>
      <title>How to deploy singularity for data processing</title>
      <link>https://x423xu.github.io/posts/2022-05-24-singularity-deployment/</link>
      <pubDate>Tue, 24 May 2022 11:20:09 +0000</pubDate>
      
      <guid>https://x423xu.github.io/posts/2022-05-24-singularity-deployment/</guid>
      <description>Installation Install on local machine from singularity-installation Create an &amp;ldquo;install.def&amp;rdquo; file: An example file: (docker image downloaded from here) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 Bootstrap: docker From: pytorch/pytorch:1.9.0-cuda11.1-cudnn8-devel %post apt-get update apt-get install -y gcc apt-get install -y g++ apt-get install -y libglib2.</description>
    </item>
    
    <item>
      <title>RemoteX11 configuration on vscode</title>
      <link>https://x423xu.github.io/posts/2022-03-20-x11-for-vscode/</link>
      <pubDate>Sun, 20 Mar 2022 13:57:00 -0400</pubDate>
      
      <guid>https://x423xu.github.io/posts/2022-03-20-x11-for-vscode/</guid>
      <description>Remote X11 understanding Suppose we have a local machine (windows/linux), wanna do some deep learning training or data analysis in a remote linux server to . To show images like plt.plot() &amp;amp; plt.show() in local machine we need X11 forwarding which directly renderes images in local machine.
Ok, first step we should connect to a remote linux server from our local machine. Supposing using SSH connection in MobaXterm, we need a private key in local machine and a public key in remote server.</description>
    </item>
    
    <item>
      <title>Jekyll</title>
      <link>https://x423xu.github.io/posts/2022-03-20-jekyll/</link>
      <pubDate>Sun, 20 Mar 2022 14:30:54 +0000</pubDate>
      
      <guid>https://x423xu.github.io/posts/2022-03-20-jekyll/</guid>
      <description>Using Jekyll to create a gitpage on windows Understanding Jekyll, Gem, Bundle, Ruby what is Ruby :hear_no_evil:
Ruby is a dynamic, open source programming language with a focus on simplicity and productivity. It has an elegant syntax that is natural to read and easy to write.
Ruby is most used for building web applications. However, it is a general-purpose language similar to Python, so it has many other applications like data analysis, prototyping, and proof of concepts.</description>
    </item>
    
  </channel>
</rss>
